---
import { Image } from 'astro:assets';
import typography from '@tailwindcss/typography';

import BaseLayout from "../layout/BaseLayout.astro"

import RichTextRenderer from "../components/RichRenderer"

import Videobox from '../components/Videobox.astro'

let contentBlocks: any[] = [];
const response = await fetch(`${import.meta.env.NEXT_PUBLIC_SERVER_URL}/api/globals/about-content?depth=2`);
if (response.ok) {
  const pageData = await response.json();
  contentBlocks = pageData.content;
} else {
  console.error('Failed to fetch content from Payload.')
}

const alignmentClasses = {
  left: 'mr-auto',
  center: 'mx-auto',
  right: 'ml-auto',
};

const paddingJustifyClasses = {
  left: 'justify-start',
  center: 'justify-center',
  right: 'justify-end',
}

const columnClasses = {
  '2': 'lg:grid-cols-2',
  '3': 'lg:grid-cols-3',
  '4': 'lg:grid-cols-4',
};

const getYouTubeId = (url: string): string | null => {
  const youtubeUrlRegexp = /(?:watch\?v=|youtu\.be\/|\/(?:embed|shorts|live)\/)([a-zA-Z0-9_-]{11})/;
  const match = url.match(youtubeUrlRegexp);
  return match ? match[1] : null;
};
---

<BaseLayout title="About â€” David J. Barrios">
  <div
    class="prose-invert lg:prose-xl max-w-none prose-a:text-red-200
      prose-a:hover:text-red-100 prose-il:text-red-500
      prose-ul:list-disc prose-ul:pl-6
      prose-ol:list-decimal prose-ol:pl-6
      prose-li:marker:text-slate-400
      prose-blockquote:border-l-4
      prose-blockquote:border-slate-500
      prose-blockquote:pl-6
      prose-blockquote:italic
      prose-blockquote:text-slate-400
      prose-blockquote:not-prose"
  >
    {contentBlocks && contentBlocks.length > 0 ? (
      contentBlocks.map(block => {
        if (block.blockType === 'richTextBlock') {
          return <RichTextRenderer data={block.richText} client:load />;
        }
        
        if (block.blockType === 'imageBlock') {
          const alignmentClass = alignmentClasses[block.alignment] ?? alignmentClasses.center;

          return (
            <figure class:list={["w-fit my-8", alignmentClass]}>
              <img 
                src={block.imageUrl} 
                alt={block.altText}
                width={block.imageDimensions.width > 0 ? block.imageDimensions.width : undefined}
                height={block.imageDimensions.height > 0 ? block.imageDimensions.height : undefined}
                class="rounded-lg shadow-lg"
              />
              {block.altText && (
                <figcaption class="text-center text-sm text-slate-400 mt-2">
                  {block.altText}
                </figcaption>
              )}
            </figure>
          )
        }

        if (block.blockType === 'textWithImageBlock') {
          const flexClass = block.alignment === 'right' ? 'md:flex-row-reverse' : 'md:flex-row';

          const textWidth = block.horizontalTextSpace ?? 75;
          const imageWidth = 100 - textWidth;

          let imageContainerStyles = '';
          let imageWrapperClasses = 'flex w-full';

          if (block.usePercentageBasedPadding) {
            const paddingValue = block.percentageImagePadding ?? 0;
            if (block.alignment === 'left') {
              imageContainerStyles = `padding-right: ${paddingValue}%;`;
            } else {
              imageContainerStyles = `padding-left: ${paddingValue}%;`;
            }
          } else {
            imageWrapperClasses += ` ${paddingJustifyClasses[block.imagePadding] ?? 'justify-center'}`;
          }

          return (
            <div class:list={["flex flex-col md:flex-row my-8 gap-8 items-center", flexClass]}>
              
              <div 
                class="flex-shrink-0"
                style={`flex-basis: ${imageWidth}%;`}
              >
                <div class:list={[imageWrapperClasses]} style={imageContainerStyles}>
                  <figure class="w-full">
                    <Image
                      src={block.imageUrl}
                      width={block.imageDimensions.width}
                      height={block.imageDimensions.height}
                      alt={block.altText}
                      class="rounded-lg shadow-lg w-full h-auto"
                      loading="lazy"
                    />
                    <figcaption class="text-center text-sm text-slate-400 mt-2">
                      {block.altText}
                    </figcaption>
                  </figure>
                </div>
              </div>

              <div 
                class="flex-shrink"
                style={`flex-basis: ${textWidth}%;`}
              >
                <RichTextRenderer data={block.richText} client:load />
              </div>
            </div>
          );
        }

        if (block.blockType === 'textWithVideo') {
          const flexClass = block.videoAlignment === 'right' ? 'md:flex-row-reverse' : 'md:flex-row';

          const youtubeUrlRegexp = /(?:watch\?v=|youtu\.be\/|\/(embed|shorts|live)\/)([a-zA-Z0-9_-]{11})/;
          const result = block.videoUrl.match(youtubeUrlRegexp);
          
          if (result) {
            const VIDEO_ID = result[2];
            const IS_SHORT = block.videoUrl.includes('/shorts/');
            const dimensionsClass = IS_SHORT ? 'aspect-[9/16]' : 'aspect-video';
            
            const textWidth = block.horizontalTextSpace ?? 75; // Default to 75%
            const videoWidth = 100 - textWidth;

            let videoContainerStyles = '';
            let videoWrapperClasses = 'flex w-full';
            if (block.usePercentageBasedPadding) {
                const paddingValue = block.percentageVideoPadding ?? 0;
                if (block.videoAlignment === 'left') {
                    videoContainerStyles = `padding-right: ${paddingValue}%;`;
                } else {
                    videoContainerStyles = `padding-left: ${paddingValue}%;`;
                }
            } else {
                videoWrapperClasses += ` ${paddingJustifyClasses[block.videoPadding] ?? 'justify-center'}`;
            }

            return (
              <div class:list={["flex flex-col md:flex-row my-8 gap-8 items-center", flexClass]}>
                <div 
                  class="flex-shrink-0"
                  style={`flex-basis: ${videoWidth}%;`}
                >
                  <div class:list={[videoWrapperClasses]} style={videoContainerStyles}>
                    <div class:list={["relative w-full", dimensionsClass]}>
                      <iframe
                        class="absolute top-0 left-0 border-0 shadow-lg w-full h-full rounded-lg"
                        src={`https://www.youtube.com/embed/${VIDEO_ID}`}
                        title="YouTube video player"
                        allow="fullscreen; accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                        loading="lazy"
                      ></iframe>
                    </div>
                  </div>
                </div>
  
                <div 
                  class="flex-shrink"
                  style={`flex-basis: ${textWidth}%;`}
                >
                  <RichTextRenderer data={block.description} client:load />
                </div>
              </div>
            );
            
          } else {
            console.error('Could not parse video URL ' + block.videoUrl)
          }

        }
        
        if (block.blockType === 'mediaGrid') {
          const gridClass = columnClasses[block.columns || '3'];
          const validMediaItems = block
            .mediaItems
            ?.filter(item => typeof item.value === 'object' && item.value !== null) || [];

            return (
              <div class="my-12" id="video-gallery">
                {block.title && <h2 class="text-2xl font-bold mb-8 text-center">{block.title}</h2>}

                <div
                  class={`grid grid-cols-1 sm:grid-cols-2 ${gridClass} gap-x-3 gap-y-15`}
                  id={`media-grid-${block.id}`}
                >
                  {validMediaItems.map(({ value: item }) => {
                    const videoId = getYouTubeId(item.videoUrl);
                    if (!videoId) return null;

                    const thumbnailUrl = item.thumbnailUrl && item.thumbnailUrl !== ''
                      ? item.thumbnailUrl
                      : `https://img.youtube.com/vi/${videoId}/maxresdefault.jpg`;
                    
                    const fallbackThumbnailUrl = `https://img.youtube.com/vi/${videoId}/hqdefault.jpg`;

                    return (
                      <Videobox
                        id={videoId}
                        thumbnailUrl={thumbnailUrl}
                        description={item.description}
                        fallbackThumbnailUrl={fallbackThumbnailUrl}
                      />
                    );
                  })}
                </div>
              </div>
            )
        }

        if (block.blockType === 'videoBlock') {
          const videoId = getYouTubeId(block.videoUrl);
          if (!videoId) return null;

          let alignment = '';
          if (block.alignment === 'center') {
            alignment = 'mx-auto'
          } else if (block.alignment === 'left') {
            alignment = ''
          } else if (block.alignment === 'right') {
            alignment = 'flex-row-reverse'
          }

          return (
            <div class:list={["my-8 flex mx-max", alignment]}>
              <figure class:list={["w-full max-w-4xl", alignment]}>
                <div class="relative w-full aspect-video bg-black rounded-lg overflow-hidden shadow-lg">
                  <iframe
                    src={`https://www.youtube.com/embed/${videoId}`}
                    title="YouTube video player"
                    allow="fullscreen; accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                    allowfullscreen
                    class="w-full h-full border-0"
                    loading="lazy"
                  ></iframe>
                </div>
                {block.caption && (
                  <figcaption class="mt-2 text-center text-sm text-slate-400">
                    {block.caption}
                  </figcaption>
                )}
              </figure>
            </div>
          )
        }


        if (block.blockType === 'htmlBlock') {
          return <div set:html={block.htmlContent} />;
        }
        
        if (block.blockType === 'textWithHTML') {
          const flexClass = block.htmlAlignment === 'right' ? 'md:flex-row-reverse' : 'md:flex-row';

            const textWidth = block.horizontalTextSpace ?? 75; // Default to 75%
            const htmlWidth = 100 - textWidth;

            let htmlContainerStyles = '';
            let htmlWrapperClasses = 'flex w-full';
            if (block.usePercentageBasedPadding) {
                const paddingValue = block.percentagehtmlPadding ?? 0;
                if (block.htmlAlignment === 'left') {
                    htmlContainerStyles = `padding-right: ${paddingValue}%;`;
                } else {
                    htmlContainerStyles = `padding-left: ${paddingValue}%;`;
                }
            } else {
                htmlWrapperClasses += ` ${paddingJustifyClasses[block.htmlPadding] ?? 'justify-center'}`;
            }

            return (
              <div class:list={["flex my-8 gap-8 items-center", flexClass]}>
                <div 
                  class:list={["flex-shrink-0"]}
                  style={`flex-basis: ${htmlWidth}%;`}
                >
                  <div class:list={[htmlWrapperClasses]} style={htmlContainerStyles}>
                    <div class:list={["relative w-full"]}>
                      <div set:html={block.htmlContent} />
                    </div>
                  </div>
                </div>
  
                <div 
                  class="flex-shrink"
                  style={`flex-basis: ${textWidth}%;`}
                >
                  <RichTextRenderer data={block.description} client:load />
                </div>
              </div>
            )
        }

        return null;
      })
    ) : (
      <p>Error de recepciÃ³n de contenido.</p>
    )}
  </div>

</BaseLayout>
